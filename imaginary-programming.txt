imaginary programming
IP
    A programming paradigm in which a computer
    program's behaviour exists in relativity to
    language models.

    To make an analogy, imaginary programming
    is a type of programming, where much like
    pure-functional, the code who's behaviour
    depends on the output of a language model,
    either pending or precomputed, stands
    apart from the part that has no such
    association.

    What is deemed 'imaginary' is code that
    uses or is waiting on output from a
    language model and its behaviour is so
    altered by it.

    What is deemed 'ordinary' is code which is
    not 'imaginary'.

    A distinction is made between grounded and
    non-grounded imaginary programming.
    'Non-grounded imaginary programming' may
    also be called 'pure imaginary
    programming'.

grounded
grounded imaginary programming
non-grounded
pure imaginary programming
tethered
    If a function has a language model as a
    parameter affecting its behaviour and
    besides from that has no other imaginary
    inputs then it is considered 'grounded'.

    If a function has a language model as a
    parameter affecting its behaviour and
    contains other imaginary inputs then it is
    considered 'tethered'.

    If an imaginary function relies on the
    output of functions that have in the past
    used a language model as a parameter, but
    does not contain a reference to specific
    language model used then it is considered
    'non-grounded' or 'pure imaginary'.

    A function can be both tethered and pure
    imaginary.

    Pure imaginary code is still code in a
    similar way to how pure functional code is
    considered code and may be used to create
    useful datastructures and algorithms.

ordinary programming
    Programming with functions that do not
    have an imaginary dimension (they do not
    take a language model as a parameter and
    the result of ordinary code is not
    polluted by a language model).

holographic programming
    [type of imaginary programming]

    This is like imaginary programming but
    where the language models are trained on
    software.

    Holographic code, therefore, may employ
    associations made between elements of the
    original code, how that code is used and
    how it is described, to build
    applications.

    Holographic programming lets you use the
    latent space of a language model as a kind
    of hyperspace to enable things like:
    - bridge the usage of an application with
      the application's code
    - imaginary reflection
    - inference in place of computation

literate programming
    NLG: A programming paradigm that
    emphasizes the importance of the reading
    and writing of code over the importance of
    the design of the code.